<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <context-param>
        <param-name>url</param-name>
        <param-value>jdbc:mysql://localhost:3306/dragon</param-value>
    </context-param>

    <!-- 指定业务层Spring容器的配置文件，多个用逗号隔开 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:/config/applicationContext.xml</param-value>
    </context-param>
    <!-- 通过contextConfigLocation指定的配置文件启动业务层的Spring容器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 加载Log4J 配置文件  -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>3000</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- 设置自动加载的配置文件 -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--classpath:只会到你class路径中查找文件 classpath*：不仅包含class路径，还包括jar文件中（class路径）进行查找-->
            <param-value>classpath:config/spring-mvc.xml</param-value>
        </init-param>
        <!--load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)。这时servlet不用初始化，而是交给容器去处理。-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--CharacterEncodingFilter是spring内置过滤器，用来指定请求或者响应的编码格式-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--encoding用来指定编码格式-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--forceEncoding表示是否强制response的编码格式也是encoding格式-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--Servlet样例-->
<!--    <servlet>
        <servlet-name>ServletDemo</servlet-name>
        <servlet-class>ServletDemo</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo</servlet-name>
        <url-pattern>/servlet/ServletDemo</url-pattern>
    </servlet-mapping>-->

    <!--Servlet接口测试样例-->
<!--    <servlet>
        <servlet-name>ServletInterface</servlet-name>
        <servlet-class>ServletInterface</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletInterface</servlet-name>
        <url-pattern>/servlet/ServletInterface</url-pattern>
    </servlet-mapping>-->

    <!-- ServletConfig接口测试样例 -->
<!--    <servlet>
        <servlet-name>ServletConfigInterface</servlet-name>
        <servlet-class>ServletConfigInterface</servlet-class>
        &lt;!&ndash;配置ServletInterface的初始化参数&ndash;&gt;
        <init-param>
            <param-name>name</param-name>
            <param-value>Jack</param-value>
        </init-param>
        <init-param>
            <param-name>password</param-name>
            <param-value>123</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletConfigInterface</servlet-name>
        <url-pattern>/servlet/ServletConfigInterface</url-pattern>
    </servlet-mapping>-->

    <!-- ServletContext -->
<!--    <servlet>
        <servlet-name>ServletContextTest</servlet-name>
        <servlet-class>ServletContextTest</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextTest</servlet-name>
        <url-pattern>/servlet/ServletContextTest</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>ServletContextTest2</servlet-name>
        <servlet-class>ServletContextTest2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextTest2</servlet-name>
        <url-pattern>/servlet/ServletContextTest2</url-pattern>
    </servlet-mapping>-->

    <!-- HttpServletRequest HttpServletResponse -->
<!--    <servlet>
        <servlet-name>HttpServletRequestTest</servlet-name>
        <servlet-class>HttpServletRequestTest</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HttpServletRequestTest</servlet-name>
        <url-pattern>/servlet/HttpServletRequestTest</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>HttpServletResponseTest</servlet-name>
        <servlet-class>HttpServletResponseTest</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HttpServletResponseTest</servlet-name>
        <url-pattern>/servlet/HttpServletResponseTest</url-pattern>
    </servlet-mapping>-->

    <!-- Servlet过滤器 -->
    <!-- Servlet过滤器样例 -->
   <!-- <filter>
        <filter-name>FilterDemo</filter-name>
        <filter-class>FilterDemo</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>FilterDemo</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->
    <!-- Servlet字符编码过滤器 -->
    <!--<filter>
        <filter-name>CharactorFilter</filter-name>
        <filter-class>CharactorFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharactorFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->
    <!--配置监听器-->
    <!--监听Context对象的创建及销毁-->
<!--    <listener>
        <listener-class>ServletContextListenerTest</listener-class>
    </listener>-->
    <!--监听Session对象的创建及销毁-->
<!--    <listener>
        <listener-class>HttpSessionListenerTest</listener-class>
    </listener>-->
    <!--监听Request对象的创建及销毁-->
<!--    <listener>
        <listener-class>ServletRequestListenerTest</listener-class>
    </listener>-->
    <!--监听ServletContext对象属性的变化-->
<!--    <listener>
        <listener-class>ServletContextAttributeListenerTest</listener-class>
    </listener>-->
    <!--监听Session对象属性的变化-->
<!--    <listener>
        <listener-class>HttpSessionAttributeListenerTest</listener-class>
    </listener>-->
    <!--监听ServletRequest对象属性的变化-->
<!--    <listener>
        <listener-class>ServletRequestAttributeListenerTest</listener-class>
    </listener>-->

    <!--Servlet监听器测试验证类-->
    <servlet>
        <servlet-name>ListenerTest</servlet-name>
        <servlet-class>com.bigDragon.servletTest.listenerTest.ListenerTest</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ListenerTest</servlet-name>
        <url-pattern>/servlet/ListenerTest</url-pattern>
    </servlet-mapping>
</web-app>