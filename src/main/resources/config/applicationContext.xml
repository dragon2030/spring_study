<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		   	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
    <!-- 引入properties文件 -->
    <context:property-placeholder location="classpath:config/*.properties" />

    <context:component-scan base-package="com.bigDragon.hibernateTest.*"></context:component-scan>

<!--    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <property name="url">
            <value>"${jdbc.url}"</value>
        </property>
        <property name="username">
            <value>root</value>
        </property>
        <property name="password">
            <value>root</value>
        </property>
    </bean>-->
    <!-- 引入properties文件 -->
    <context:property-placeholder location="classpath:config/*.properties" />

    <!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
    <!-- 阿里 druid 数据库连接池 -->
    <bean id= "dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name ="url" value = "${jdbc.url}" />
        <property name ="username" value = "${jdbc.username}" />
        <property name ="password" value = "${jdbc.password}" />
        <property name ="driverClassName" value = "${jdbc.driver}" />
        <!-- 最大并发连接数 -->
        <property name ="maxActive" value = "${maxActive}" />
    </bean>

    <!-- 定义 Autowired 自动注入 bean -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.bigDragon.demo.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  配置MyBatis begin-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 该配置文件用来指定Mapper映射文件的位置 ，如果映射文件与相应的接口同名，且在同一路径下，那么可以不配置该选项-->
        <property name="mapperLocations">
            <list>
                <value>classpath:mappers/*.xml</value>
            </list>
        </property>
        <!-- MyBatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bigDragon.demo.dao" />
    </bean>
    <!--  配置MyBatis end -->

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <aop:aspectj-autoproxy/>

    <!-- 配置 Annotation 驱动，定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false">
        &lt;!&ndash; 注入datasource，给sessionfactoryBean内setdatasource提供数据源 &ndash;&gt;
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:hibernate/hibernate.cfg.xml"></property>
        &lt;!&ndash; //加载实体类的映射文件位置及名称 &ndash;&gt;
        <property name="mappingLocations" value="classpath:hibernate/user.hbm.xml"></property>
    </bean>-->

    <!-- 配置Spring声明式事务 -->
<!--    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>-->
    <!-- 配置事务事务属性 -->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>-->
    <!-- 配置事务切点，并把切点和事务属性关联起来 -->
<!--    <aop:config>
        <aop:pointcut expression="execution(* com.demo.ssm.daoImpl.*.*(..))" id="txPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>-->

</beans>